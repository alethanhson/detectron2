import os
import cv2
import numpy as np
import random
from tqdm import tqdm

def save_mask_with_original_image_from_folder(model_old, model_new, input_folder, output_folder="outputs", num_samples=5):
    """
    Ch·∫°y inference tr√™n m·ªôt s·ªë ·∫£nh trong input_folder v√† l∆∞u k·∫øt qu·∫£ mask overlay t·ª´ model_old v√† model_new.
    
    Args:
        model_old: ƒê·ªëi t∆∞·ª£ng model (v√≠ d·ª•: DefaultPredictor) c·ªßa model c≈©.
        model_new: ƒê·ªëi t∆∞·ª£ng model c·ªßa model m·ªõi.
        input_folder: ƒê∆∞·ªùng d·∫´n t·ªõi folder ch·ª©a c√°c ·∫£nh ƒë·∫ßu v√†o.
        output_folder: Folder l∆∞u k·∫øt qu·∫£ (s·∫Ω x√≥a v√† t·∫°o m·ªõi n·∫øu ƒë√£ t·ªìn t·∫°i).
        num_samples: S·ªë l∆∞·ª£ng m·∫´u ·∫£nh ƒë·∫ßu ti√™n c·∫ßn x·ª≠ l√Ω.
    """
    # L·∫•y danh s√°ch file ·∫£nh t·ª´ folder (theo ƒëu√¥i ·∫£nh ph·ªï bi·∫øn)
    image_files = [os.path.join(input_folder, f) 
                   for f in os.listdir(input_folder) 
                   if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp'))]
    image_files = image_files[:num_samples]
    
    # X√≥a folder output n·∫øu ƒë√£ t·ªìn t·∫°i, sau ƒë√≥ t·∫°o l·∫°i
    if os.path.exists(output_folder):
        import shutil
        shutil.rmtree(output_folder)
    os.makedirs(output_folder, exist_ok=True)
    
    def overlay_random_color_mask(image, instances, alpha=0.8):
        """
        Overlay mask v·ªõi m√†u ng·∫´u nhi√™n l√™n ·∫£nh g·ªëc.
        Args:
            image: ·∫¢nh g·ªëc (RGB).
            instances: ƒê·ªëi t∆∞·ª£ng instances t·ª´ output c·ªßa model, ch·ª©a pred_masks.
            alpha: ƒê·ªô trong su·ªët c·ªßa overlay (0.8 nghƒ©a l√† 80% m√†u overlay).
        Returns:
            overlay: ·∫¢nh sau khi overlay mask.
        """
        overlay = image.copy()
        # Ki·ªÉm tra n·∫øu c√≥ mask d·ª± ƒëo√°n
        if len(instances) > 0 and instances.has("pred_masks"):
            masks = instances.pred_masks.numpy()  # shape: (num_masks, H, W) ki·ªÉu boolean
            num_masks = masks.shape[0]
            # T·∫°o danh s√°ch m√†u ng·∫´u nhi√™n (s√°ng, ƒë·ªÉ d·ªÖ ph√¢n bi·ªát)
            colors = [
                [random.randint(100, 255), random.randint(100, 255), random.randint(100, 255)]
                for _ in range(num_masks)
            ]
            for idx, mask in enumerate(masks):
                # V·ªõi m·ªói mask, overlay m√†u l√™n nh·ªØng pixel t∆∞∆°ng ·ª©ng
                overlay[mask] = (alpha * np.array(colors[idx]) + (1 - alpha) * overlay[mask]).astype(np.uint8)
        return overlay

    for image_path in tqdm(image_files, desc="Processing images"):
        img = cv2.imread(image_path)
        if img is None:
            print(f"Kh√¥ng th·ªÉ load ·∫£nh: {image_path}")
            continue
        # Chuy·ªÉn ƒë·ªïi t·ª´ BGR (OpenCV) sang RGB
        image_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        
        # D·ª± ƒëo√°n t·ª´ model c≈©
        outputs_old = model_old(image_rgb)
        instances_old = outputs_old["instances"].to("cpu")
        mask_overlay_old = overlay_random_color_mask(image_rgb, instances_old, alpha=0.8)
        
        # D·ª± ƒëo√°n t·ª´ model m·ªõi
        outputs_new = model_new(image_rgb)
        instances_new = outputs_new["instances"].to("cpu")
        mask_overlay_new = overlay_random_color_mask(image_rgb, instances_new, alpha=0.8)
        
        # L·∫•y t√™n file ·∫£nh g·ªëc
        filename = os.path.basename(image_path)
        old_output_path = os.path.join(output_folder, f"old_mask_overlay_{filename}")
        new_output_path = os.path.join(output_folder, f"new_mask_overlay_{filename}")
        
        # L∆∞u ·∫£nh k·∫øt qu·∫£ (cv2.imwrite y√™u c·∫ßu ·∫£nh ·ªü ƒë·ªãnh d·∫°ng BGR)
        cv2.imwrite(old_output_path, cv2.cvtColor(mask_overlay_old, cv2.COLOR_RGB2BGR))
        cv2.imwrite(new_output_path, cv2.cvtColor(mask_overlay_new, cv2.COLOR_RGB2BGR))
        
        print(f"üìå ƒê√£ l∆∞u ·∫£nh mask segmentation: {old_output_path} & {new_output_path}")

# --- V√≠ d·ª• s·ª≠ d·ª•ng:
# Gi·∫£ s·ª≠ b·∫°n ƒë√£ c·∫•u h√¨nh model_old v√† model_new s·ª≠ d·ª•ng DefaultPredictor v·ªõi config instance segmentation.

from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2 import model_zoo

# C·∫•u h√¨nh cho model c≈©
cfg_old = get_cfg()
cfg_old.merge_from_file(model_zoo.get_config_file("COCO-InstanceSegmentation/mask_rcnn_R_101_FPN_3x.yaml"))
cfg_old.MODEL.WEIGHTS = "models/model_final_detect.pth"  # C·∫≠p nh·∫≠t checkpoint model c≈©
cfg_old.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5
cfg_old.MODEL.MASK_ON = True
cfg_old.MODEL.ROI_HEADS.NUM_CLASSES = 4

model_old = DefaultPredictor(cfg_old)

# C·∫•u h√¨nh cho model m·ªõi
cfg_new = get_cfg()
cfg_new.merge_from_file(model_zoo.get_config_file("COCO-InstanceSegmentation/mask_rcnn_R_101_FPN_3x.yaml"))
cfg_new.MODEL.WEIGHTS = "models/mask_rcnn_R_101_FPN_3x/time_2/model_final.pth"  # C·∫≠p nh·∫≠t checkpoint model m·ªõi
cfg_new.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5
cfg_new.MODEL.MASK_ON = True
cfg_new.MODEL.ROI_HEADS.NUM_CLASSES = 4
model_new = DefaultPredictor(cfg_new)

# ƒê∆∞·ªùng d·∫´n t·ªõi folder ch·ª©a ·∫£nh test (kh√¥ng c·∫ßn annotation COCO)
input_folder = "images"  # Folder ch·ª©a ·∫£nh ƒë·∫ßu v√†o
output_folder = "image_detect_test"  # Folder l∆∞u k·∫øt qu·∫£

# Ch·∫°y h√†m ƒë·ªÉ l∆∞u k·∫øt qu·∫£ overlay mask t·ª´ c·∫£ hai model
save_mask_with_original_image_from_folder(model_old, model_new, input_folder, output_folder, num_samples=100)
